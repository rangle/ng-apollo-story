type Note {
  id: ID!
  name: String!
  completed: Boolean!
}

input NoteInput {
  id: ID!
  name: String!
  completed: Boolean!
}

input UpdateNoteInput {
  id: ID!
  name: String
  completed: Boolean
}

enum Granularity {
  DAY
  HOUR
  TEN_MINUTE
}

type Rate {
  ticker: String!
  timeUpdated: Float!
  name: String!
  rank: Int!
  volume: Float!
  volumeChange: Float!
  price: Float!
  priceCad: Float!
}

type Query {
  listNotes: [Note]
  getTickers: [String]
  getCryptoByTicker(ticker: String!, granularity: Granularity!): [Rate]
}

type Mutation {
  updateNote(note: UpdateNoteInput!): Note
  deleteNote(noteId: String!): String
}
